package graphs;

import java.util.ArrayList;

public class Flow {
	private Graph graph;
	private Vertex source;
	private Vertex destination;
	private ArrayList<Label> label; 
	public Flow(Graph graph) {
		this.graph = graph;
		this.label = new ArrayList();
	}

	public void solve(Vertex source, Vertex destination) {
		// TODO Auto-generated method stub
		this.source = source;
		this.destination = destination;
		Vertex currentVertex = source;
		Label label = new Label(9999, null);
		label.setSource(source);
		source.setVisited(true);
		this.label.add(label);
		Boolean repeat = true;
		while (repeat) {
			Vertex pathVertex = maxEdge(currentVertex);
		}
	}
	private Vertex maxEdge(Vertex source) {
		Integer bigEdge = 0;
		Vertex findVertex = null;
		for(Edges edge : source.getEdgesList()) {
			if (bigEdge < edge.getWeight1() && edge.getDestination().getVisited() == false) {
				bigEdge = edge.getWeight1();
				findVertex = edge.getDestination();
			}
		}
		return findVertex;
	}
}
